/*-
 * #%L
 * alfresco-tas-restapi
 * %%
 * Copyright (C) 2005 - 2022 Alfresco Software Limited
 * %%
 * This file is part of the Alfresco software.
 * If the software was purchased under a paid Alfresco license, the terms of
 * the paid license agreement will prevail.  Otherwise, the software is
 * provided under the following open source license terms:
 *
 * Alfresco is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Alfresco is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */
package org.alfresco.rest.model;

import java.util.List;
import java.util.Objects;

import org.alfresco.rest.core.IRestModel;
import org.alfresco.utility.model.TestModel;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Generated by 'krystian' on '2022-09-28 11:33' from 'Alfresco Content Services REST API' swagger file 
 * Generated from 'Alfresco Content Services REST API' swagger file
 * Base Path {@linkplain /alfresco/api/-default-/public/alfresco/versions/1}
 */
public class RestRuleExecutionBodyModel extends TestModel implements IRestModel<RestRuleExecutionBodyModel>
{
    @JsonProperty(value = "entry")
    RestRuleExecutionBodyModel model;

    @Override
    public RestRuleExecutionBodyModel onModel()
    {
        return model;
    }

    /**
    Execute rules against the given folder and all sub-folders
    */	        

    private boolean isEachSubFolderIncluded;	    
    /**
    Execute also inherited rules
    */	        

    private boolean isEachInheritedRuleExecuted;	    

    public boolean getIsEachSubFolderIncluded()
    {
        return this.isEachSubFolderIncluded;
    }

    public void setIsEachSubFolderIncluded(boolean isEachSubFolderIncluded)
    {
        this.isEachSubFolderIncluded = isEachSubFolderIncluded;
    }				

    public boolean getIsEachInheritedRuleExecuted()
    {
        return this.isEachInheritedRuleExecuted;
    }

    public void setIsEachInheritedRuleExecuted(boolean isEachInheritedRuleExecuted)
    {
        this.isEachInheritedRuleExecuted = isEachInheritedRuleExecuted;
    }

    @Override
    public String toString()
    {
        return "RestRuleExecutionBodyModel{" + "isEachSubFolderIncluded=" + isEachSubFolderIncluded + ", isEachInheritedRuleExecuted=" + isEachInheritedRuleExecuted + '}';
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        RestRuleExecutionBodyModel that = (RestRuleExecutionBodyModel) o;
        return isEachSubFolderIncluded == that.isEachSubFolderIncluded && isEachInheritedRuleExecuted == that.isEachInheritedRuleExecuted;
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(isEachSubFolderIncluded, isEachInheritedRuleExecuted);
    }
}
 
