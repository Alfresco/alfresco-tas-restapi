package org.alfresco.rest.search;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.alfresco.rest.core.IRestModel;
import org.alfresco.rest.core.assertion.ModelAssertion;
import org.alfresco.utility.model.TestModel;

import java.util.List;

/**
 * Generated by 'gethin' on '2017-05-05 09:54' from 'Alfresco Content Services REST API' swagger file 
 * Generated from 'Alfresco Content Services REST API' swagger file
 * Base Path {@linkplain /alfresco/api/-default-/public/search/versions/1}
 */
public class RestRequestStatsModel extends TestModel implements IRestModel<RestRequestStatsModel>
{
    @Override
    public ModelAssertion<RestRequestStatsModel> assertThat()
    {
        return new ModelAssertion<RestRequestStatsModel>(this);
    }

    @Override
    public ModelAssertion<RestRequestStatsModel> and()
    {
        return assertThat();
    }

    @JsonProperty(value = "entry")
    RestRequestStatsModel model;

    @Override
    public RestRequestStatsModel onModel()
    {
        return model;
    }

    /**
    The stats field
    */	        

    private String field;	    
    /**
    A label to include for reference the stats field
    */	        

    private String label;	    
    /**
    The minimum value of the field
    */	        

    private boolean min = true;
    /**
    The maximum value of the field
    */	        

    private boolean max = true;
    /**
    The sum of all values of the field
    */	        

    private boolean sum = true;
    /**
    The Number of values found
    */	        

    private boolean countValues = true;
    /**
    The Number which do not have a value for this field
    */	        

    private boolean missing = true;
    /**
    The average
    */	        

    private boolean mean = true;
    /**
    Standard deviation
    */	        

    private boolean stddev = true;
    /**
    Sum of all values squared
    */	        

    private boolean sumOfSquares = true;
    /**
    The set of all distinct values for the field (This can be very expensive to calculate)
    */	        

    private boolean distinctValues;	    
    /**
    The Number of distinct values  (This can be very expensive to calculate)
    */	        

    private boolean countDistinct;	    
    /**
    A statistical approximation of the Number of distinct values
    */	        

    private boolean cardinality;	    
    /**
    Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.
    */	        

    private Number cardinalityAccuracy;	    
    /**
    A list of filters to exclude
    */	        

    private List<String> excludeFilters;	    
    /**
    A list of percentile values, e.g. "1,99,99.9"
    */	        

    private List<Number> percentiles;	    

    public String getField()
    {
        return this.field;
    }

    public void setField(String field)
    {
        this.field = field;
    }				

    public String getLabel()
    {
        return this.label;
    }

    public void setLabel(String label)
    {
        this.label = label;
    }				

    public boolean getMin()
    {
        return this.min;
    }

    public void setMin(boolean min)
    {
        this.min = min;
    }				

    public boolean getMax()
    {
        return this.max;
    }

    public void setMax(boolean max)
    {
        this.max = max;
    }				

    public boolean getSum()
    {
        return this.sum;
    }

    public void setSum(boolean sum)
    {
        this.sum = sum;
    }				

    public boolean getCountValues()
    {
        return this.countValues;
    }

    public void setCountValues(boolean countValues)
    {
        this.countValues = countValues;
    }				

    public boolean getMissing()
    {
        return this.missing;
    }

    public void setMissing(boolean missing)
    {
        this.missing = missing;
    }				

    public boolean getMean()
    {
        return this.mean;
    }

    public void setMean(boolean mean)
    {
        this.mean = mean;
    }				

    public boolean getStddev()
    {
        return this.stddev;
    }

    public void setStddev(boolean stddev)
    {
        this.stddev = stddev;
    }				

    public boolean getSumOfSquares()
    {
        return this.sumOfSquares;
    }

    public void setSumOfSquares(boolean sumOfSquares)
    {
        this.sumOfSquares = sumOfSquares;
    }				

    public boolean getDistinctValues()
    {
        return this.distinctValues;
    }

    public void setDistinctValues(boolean distinctValues)
    {
        this.distinctValues = distinctValues;
    }				

    public boolean getCountDistinct()
    {
        return this.countDistinct;
    }

    public void setCountDistinct(boolean countDistinct)
    {
        this.countDistinct = countDistinct;
    }				

    public boolean getCardinality()
    {
        return this.cardinality;
    }

    public void setCardinality(boolean cardinality)
    {
        this.cardinality = cardinality;
    }				

    public Number getCardinalityAccuracy()
    {
        return this.cardinalityAccuracy;
    }

    public void setCardinalityAccuracy(Number cardinalityAccuracy)
    {
        this.cardinalityAccuracy = cardinalityAccuracy;
    }				

    public List<String> getExcludeFilters()
    {
        return this.excludeFilters;
    }

    public void setExcludeFilters(List<String> excludeFilters)
    {
        this.excludeFilters = excludeFilters;
    }				

    public List<Number> getPercentiles()
    {
        return this.percentiles;
    }

    public void setPercentiles(List<Number> percentiles)
    {
        this.percentiles = percentiles;
    }				
}
 
